"""
News module for Arvis
"""

from datetime import datetime
from typing import Any, Dict, List, Optional

import requests

from config.config import Config
from utils.logger import ModuleLogger


class NewsModule:
    """News module using WorldNewsAPI"""

    def __init__(self, config: Config):
        self.config = config
        self.logger = ModuleLogger("NewsModule")

        self.api_key = config.get("news.api_key", "")
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã World News API
        self.api_url_search = str(config.get("news.api_url", "https://api.worldnewsapi.com/search-news"))
        self.api_url_top = "https://api.worldnewsapi.com/top-news"
        self.country = config.get("news.country", "ua")
        self.language = config.get("news.language", "ru")
        self.page_size = 10

        self.session = requests.Session()
        self.request_timeout = 15

    def _headers(self) -> Dict[str, str]:
        return {"x-api-key": str(self.api_key or "")}

    def get_news(
        self, query: Optional[str] = None, category: Optional[str] = None, country: Optional[str] = None
    ) -> str:
        """Get latest news"""
        if not self.api_key:
            return "‚ùå API –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á WorldNewsAPI."

        try:
            self.logger.info(f"Getting news - query: {query}, category: {category}")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if query:
                # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
                params = {
                    "text": query,
                    "language": self.language,
                    "number": self.page_size,
                }
                # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if country or self.country:
                    params["source-country"] = country or self.country
                response = self.session.get(
                    self.api_url_search, params=params, headers=self._headers(), timeout=self.request_timeout
                )
            else:
                # –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ/—è–∑—ã–∫—É
                params = {"language": self.language, "source-country": (country or self.country)}
                response = self.session.get(
                    self.api_url_top, params=params, headers=self._headers(), timeout=self.request_timeout
                )

            if response.status_code == 200:
                data = response.json()
                return self.format_news_response(data, query or category or "–≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
            elif response.status_code == 401:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –¥–ª—è WorldNewsAPI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            elif response.status_code == 429:
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WorldNewsAPI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}"

        except requests.exceptions.HTTPError as http_err:
            # Fallback: –µ—Å–ª–∏ top-news –≤–µ—Ä–Ω—É–ª 400 (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —è–∑—ã–∫–∞/—Å—Ç—Ä–∞–Ω—ã), –ø–æ–ø—Ä–æ–±—É–µ–º search-news
            self.logger.warning(f"HTTP error in news: {http_err}")
            try:
                params = {"language": self.language, "number": self.page_size}
                if not query:
                    # –ë–µ–∑ —è–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —è–∑—ã–∫ –∏ —Å—Ç—Ä–∞–Ω—É –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä
                    params["source-country"] = country or self.country
                else:
                    params["text"] = query
                resp2 = self.session.get(
                    self.api_url_search, params=params, headers=self._headers(), timeout=self.request_timeout
                )
                if resp2.status_code == 200:
                    data = resp2.json()
                    return self.format_news_response(data, query or category or "–≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
            except Exception:
                pass
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (fallback —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è)."

        except requests.exceptions.Timeout:
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π."
        except requests.exceptions.ConnectionError:
            return "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."
        except Exception as e:
            self.logger.error(f"News API error: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"

    def format_news_response(self, data: Dict[str, Any], topic: str) -> str:
        """Format WorldNewsAPI response into readable text"""
        try:
            # WorldNewsAPI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            # - search-news: –ø–æ–ª–µ 'news' (—Å–ø–∏—Å–æ–∫)
            # - top-news: –ø–æ–ª–µ 'top_news' (—Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø–æ–¥—Å–ø–∏—Å–∫–∞–º–∏ 'news')
            if "top_news" in data:
                clusters = data.get("top_news", [])
                # –ë–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
                aggregated = []
                for cl in clusters:
                    items = cl.get("news", [])
                    if items:
                        aggregated.append(items[0])
                articles = aggregated
                total_results = len(articles)
            else:
                articles = data.get("news", []) or data.get("articles", [])
                total_results = data.get("totalResults", len(articles))

            if not articles:
                return f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            response = f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - {topic}\n"
            response += f"üìä –ù–∞–π–¥–µ–Ω–æ: {total_results} –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"

            for i, article in enumerate(articles[:5], 1):
                title = article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                description = article.get("summary") or article.get("description") or article.get("text", "")
                source = article.get("source_name") or article.get("source", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                url = article.get("url") or article.get("link", "")
                published_at = article.get("publish_date") or article.get("publishedAt", "")

                # Format publication time
                if published_at:
                    try:
                        pub_time = datetime.fromisoformat(published_at.replace("Z", "+00:00"))
                        time_str = pub_time.strftime("%d.%m %H:%M")
                    except:
                        time_str = "–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    time_str = "–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                response += f"üìÑ {i}. {title}\n"
                response += f"üìÖ {time_str} | üì° {source}\n"

                if description:
                    # Limit description length
                    desc = description[:150] + "..." if len(description) > 150 else description
                    response += f"üìù {desc}\n"

                if url:
                    response += f"üîó {url}\n"

                response += "\n"

            return response

        except Exception as e:
            self.logger.error(f"Error formatting news response: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π."

    def get_news_by_category(self, category: str) -> str:
        """Get news by specific category"""
        valid_categories = ["business", "entertainment", "general", "health", "science", "sports", "technology"]

        if category.lower() not in valid_categories:
            return f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_categories)}"

        return self.get_news(category=category.lower())

    def search_news(self, query: str, sort_by: str = "publish_date") -> str:
        """Search news by query (WorldNewsAPI)"""
        if not self.api_key:
            return "‚ùå API –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        try:
            params = {"text": query, "language": self.language, "number": self.page_size, "sort": "publish-time"}
            response = self.session.get(
                self.api_url_search, params=params, headers=self._headers(), timeout=self.request_timeout
            )
            if response.status_code == 200:
                data = response.json()
                return self.format_news_response(data, f"–ø–æ–∏—Å–∫: {query}")
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}"
        except Exception as e:
            self.logger.error(f"News search error: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

    def get_sources(self, category: Optional[str] = None, country: Optional[str] = None) -> str:
        """Get available news sources"""
        if not self.api_key:
            return "‚ùå API –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."

        try:
            sources_url = "https://newsapi.org/v2/sources"

            params = {"apiKey": self.api_key, "language": self.language}

            if category:
                params["category"] = category
            if country:
                params["country"] = country

            response = self.session.get(sources_url, params=params)

            if response.status_code == 200:
                data = response.json()
                sources = data.get("sources", [])

                if not sources:
                    return "üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

                response_text = "üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"

                for source in sources[:10]:
                    name = source.get("name", "")
                    description = source.get("description", "")
                    category = source.get("category", "")
                    url = source.get("url", "")

                    response_text += f"üì∞ {name}\n"
                    if category:
                        response_text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    if description:
                        desc = description[:100] + "..." if len(description) > 100 else description
                        response_text += f"üìù {desc}\n"
                    if url:
                        response_text += f"üîó {url}\n"
                    response_text += "\n"

                return response_text
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response.status_code}"

        except Exception as e:
            self.logger.error(f"Sources API error: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def get_regional_news(self, region: Optional[str] = None) -> str:
        """Get regional news"""
        region_map = {
            "—É–∫—Ä–∞–∏–Ω–∞": "ua",
            "—Ä–æ—Å—Å–∏—è": "ru",
            "–ø–æ–ª—å—à–∞": "pl",
            "–≥–µ—Ä–º–∞–Ω–∏—è": "de",
            "—Ñ—Ä–∞–Ω—Ü–∏—è": "fr",
            "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "gb",
            "—Å—à–∞": "us",
        }

        if region:
            country_code = str(region_map.get(region.lower(), region.lower()))
        else:
            country_code = self.country

        return self.get_news(country=str(country_code))

    def set_api_key(self, api_key: str):
        """Set news API key"""
        self.api_key = api_key
        self.config.set("news.api_key", api_key)
        self.logger.info("News API key updated")

    def set_country(self, country: str):
        """Set default country for news"""
        self.country = country
        self.config.set("news.country", country)
        self.logger.info(f"Default country set to: {country}")

    def set_language(self, language: str):
        """Set language for news"""
        self.language = language
        self.config.set("news.language", language)
        self.logger.info(f"Language set to: {language}")

    def test_api_connection(self) -> bool:
        """Test news API connection"""
        if not self.api_key:
            return False
        try:
            params = {"language": self.language, "source-country": self.country}
            response = self.session.get(
                self.api_url_top, params=params, headers=self._headers(), timeout=self.request_timeout
            )
            return response.status_code == 200
        except Exception as e:
            self.logger.error(f"News API test failed: {e}")
            return False

    def get_trending_topics(self) -> str:
        """Get trending news topics (simplified implementation)"""
        trending_queries = ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø–æ–ª–∏—Ç–∏–∫–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Å–ø–æ—Ä—Ç", "–Ω–∞—É–∫–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]

        results = []
        for query in trending_queries[:3]:  # Limit to avoid API rate limits
            try:
                response = self.search_news(query)
                if not response.startswith("‚ùå"):
                    results.append(f"üî• {query.capitalize()}")
                    # Get first headline from response
                    lines = response.split("\n")
                    for line in lines:
                        if line.startswith("üìÑ 1."):
                            headline = line.replace("üìÑ 1. ", "")
                            results.append(f"   ‚Ä¢ {headline[:80]}...")
                            break
            except:
                continue

        if results:
            return "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã:\n\n" + "\n".join(results)
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã."

    def cleanup(self):
        """Cleanup news module resources"""
        try:
            if self.session:
                self.session.close()
            self.logger.info("News module cleanup complete")
        except Exception as e:
            self.logger.error(f"Error during news cleanup: {e}")

    def get_status(self) -> Dict[str, Any]:
        """Get news module status"""
        return {
            "api_key_configured": bool(self.api_key),
            "country": self.country,
            "language": self.language,
            "api_connection": self.test_api_connection(),
        }
