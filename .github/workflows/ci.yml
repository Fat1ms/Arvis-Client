name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Check code formatting with Black
      run: black --check --line-length 120 .
      continue-on-error: true

    - name: Check import sorting with isort
      run: isort --check-only --profile black .
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,build,dist
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics --exclude=venv,build,dist

    - name: Type check with mypy (optional)
      run: mypy src/ modules/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: windows-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run unit tests
      run: |
        pytest tests/ --verbose --cov=src --cov=modules --cov-report=xml --cov-report=term
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for known vulnerabilities in dependencies
      run: safety check --json
      continue-on-error: true

    - name: Security scan with Bandit
      run: bandit -r src/ modules/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json
      if: always()

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  build-check:
    name: Build Check
    runs-on: windows-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check if main.py imports work
      run: python -c "import sys; sys.path.insert(0, '.'); import version; print('Version:', version.__version__)"

    - name: Verify project structure
      run: |
        if (!(Test-Path "src/core/arvis_core.py")) { exit 1 }
        if (!(Test-Path "src/gui/main_window.py")) { exit 1 }
        if (!(Test-Path "modules/llm_client.py")) { exit 1 }
        if (!(Test-Path "config/config.json")) { exit 1 }
        Write-Host "âœ… Project structure verified"
