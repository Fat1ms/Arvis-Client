"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞–ø—É—Å–∫–∞ Arvis
"""

import sys
import time

print("=" * 60)
print("üîç Arvis Startup Diagnostics")
print("=" * 60)

# 1. Python version
print(f"\n‚úÖ Python version: {sys.version}")

# 2. PyQt5 import
print("\n‚è≥ Testing PyQt5 import...")
try:
    from PyQt5.QtWidgets import QApplication

    print("‚úÖ PyQt5 OK")
except Exception as e:
    print(f"‚ùå PyQt5 FAILED: {e}")
    sys.exit(1)

# 3. Vosk import
print("\n‚è≥ Testing Vosk import...")
try:
    import vosk

    print(f"‚úÖ Vosk OK (version: {vosk.__version__ if hasattr(vosk, '__version__') else 'unknown'})")
except Exception as e:
    print(f"‚ùå Vosk FAILED: {e}")

# 4. PyTorch import (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º)
print("\n‚è≥ Testing PyTorch import (may take 10-30 seconds)...")
torch_start = time.time()
try:
    import torch

    torch_time = time.time() - torch_start
    print(f"‚úÖ PyTorch OK (loaded in {torch_time:.2f}s, version: {torch.__version__})")
except Exception as e:
    torch_time = time.time() - torch_start
    print(f"‚ùå PyTorch FAILED after {torch_time:.2f}s: {e}")

# 5. Config loading
print("\n‚è≥ Testing config loading...")
try:
    from config.config import Config

    config = Config()
    print(f"‚úÖ Config OK")
    print(f"   - STT model: {config.get('stt.model_path')}")
    print(f"   - TTS enabled: {config.get('tts.enabled')}")
except Exception as e:
    print(f"‚ùå Config FAILED: {e}")

# 6. Check model files
print("\n‚è≥ Checking model files...")
import os

models_dir = "models"
if os.path.exists(models_dir):
    print(f"‚úÖ Models directory exists")
    for item in os.listdir(models_dir):
        if os.path.isdir(os.path.join(models_dir, item)):
            print(f"   üìÅ {item}")
else:
    print(f"‚ùå Models directory NOT FOUND")

print("\n" + "=" * 60)
print("‚úÖ Diagnostics complete!")
print("=" * 60)
