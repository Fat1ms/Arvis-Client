"""
Bark TTS Provider (Text-to-Speech)
–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Bark

Priority: 2 (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ª–æ–∫–∞–ª—å–Ω—ã–π)
–Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: –†—É—Å—Å–∫–∏–π + English
"""

from typing import Optional, Generator, Tuple
import numpy as np

from config.config import Config
from utils.logger import ModuleLogger
from utils.providers import TTSProvider, ProviderStatus


class BarkTTSProvider(TTSProvider):
    """
    –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Bark –æ—Ç Suno AI.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ (default: False)
    - voice_preset: ID –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "v2/en_speaker_0")
    - temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.1-1.0)
    - language: –Ø–∑—ã–∫ —Å–∏–Ω—Ç–µ–∑–∞ ("en", "ru", –∏ —Ç.–¥.)
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - bark —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install bark)
    - –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç ~3 –ì–ë)
    - GPU —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (CPU –º–µ–¥–ª–µ–Ω–Ω—ã–π)
    
    –ö–∞—á–µ—Å—Ç–≤–æ: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ
    –°–∫–æ—Ä–æ—Å—Ç—å: ‚ö° –ú–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞ CPU, –±—ã—Å—Ç—Ä–æ –Ω–∞ GPU
    """

    def __init__(
        self,
        config: Config,
        use_gpu: Optional[bool] = None,
        voice_preset: Optional[str] = None,
        temperature: float = 0.7,
        language: str = "ru"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bark TTS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
        
        Args:
            config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU (–µ—Å–ª–∏ None, –±–µ—Ä—ë—Ç—Å—è –∏–∑ config)
            voice_preset: ID –≥–æ–ª–æ—Å–∞ (–µ—Å–ª–∏ None, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.1-1.0)
            language: –Ø–∑—ã–∫ —Å–∏–Ω—Ç–µ–∑–∞ ("en", "ru", etc.)
        """
        super().__init__("bark")
        self.config = config
        self.language = language
        self.temperature = temperature
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ Bark –µ—Å–ª–∏ –µ—Å—Ç—å
        bark_cfg = config.get("tts.bark_config", {})
        
        self.use_gpu = use_gpu if use_gpu is not None else bark_cfg.get("use_gpu", False)
        self.voice_preset = voice_preset or bark_cfg.get("voice_preset", "v2/en_speaker_0")
        self.use_small_model = bark_cfg.get("use_small_model", False)
        
        self.bark_module = None
        self.sample_rate = 24000  # Bark —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        self._initialized = False
        
        self.logger.info(f"üé§ Bark TTS Provider initialized (gpu={self.use_gpu}, lang={language})")

    def get_priority(self) -> int:
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
        Bark - –ª–æ–∫–∞–ª—å–Ω—ã–π TTS, –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        """
        return 2

    def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Bark TTS –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
        
        –¢—Ä–µ–±—É–µ—Ç:
        - bark —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        - –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å)
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        try:
            if self._initialized:
                return self.is_available()

            self.logger.info("üöÄ Initializing Bark TTS...")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Bark
            try:
                from bark import SAMPLE_RATE, preload_models, generate_audio
                self.logger.info("üì¶ Bark module imported successfully")
            except ImportError:
                self.logger.error("‚ùå Bark not installed. Install: pip install bark")
                self._status.value = "unavailable"
                return False

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            self.SAMPLE_RATE = SAMPLE_RATE
            self.preload_models = preload_models
            self.generate_audio = generate_audio
            self.sample_rate = SAMPLE_RATE

            # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ (–¥–æ–ª–≥–æ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!)
            self.logger.info("‚è≥ Preloading Bark models (this may take a minute)...")
            try:
                self.preload_models()
                self.logger.info("‚úÖ Bark models loaded successfully")
            except Exception as e:
                self.logger.error(f"‚ùå Failed to preload models: {e}")
                self._status.value = "unavailable"
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self.use_gpu:
                try:
                    import torch
                    if not torch.cuda.is_available():
                        self.logger.warning("‚ö†Ô∏è GPU requested but not available, falling back to CPU")
                        self.use_gpu = False
                    else:
                        self.logger.info(f"‚úì GPU available: {torch.cuda.get_device_name(0)}")
                except ImportError:
                    self.logger.warning("‚ö†Ô∏è torch not found, GPU acceleration disabled")
                    self.use_gpu = False

            self._initialized = True
            self._status.value = "available"
            self.logger.info("‚úÖ Bark TTS initialized successfully")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Bark TTS: {e}")
            self.set_error(str(e))
            self._status.value = "error"
            return False

    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bark TTS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –∏–Ω–∞—á–µ False
        """
        try:
            if not self._initialized:
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ Bark –∑–∞–≥—Ä—É–∂–µ–Ω
            return self.generate_audio is not None

        except Exception as e:
            self.logger.debug(f"Bark availability check failed: {e}")
            return False

    def synthesize(
        self,
        text: str,
        language: Optional[str] = None,
        voice_preset: Optional[str] = None,
        temperature: Optional[float] = None,
        use_small_model: Optional[bool] = None,
    ) -> np.ndarray:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            language: –Ø–∑—ã–∫ (default –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)
            voice_preset: ID –≥–æ–ª–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "v2/en_speaker_0")
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.1-1.0)
            use_small_model: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–ª—É—é –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–µ–µ, –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            
        Returns:
            NumPy array —Å –∞—É–¥–∏–æ (16 bit, mono, 24000 Hz)
            
        Raises:
            RuntimeError: –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.is_available():
            raise RuntimeError("Bark TTS is not available")

        try:
            lang = language or self.language
            voice = voice_preset or self.voice_preset
            temp = temperature if temperature is not None else self.temperature
            small_model = use_small_model if use_small_model is not None else self.use_small_model

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Bark
            # Bark –æ–∂–∏–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
            if lang == "ru":
                # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å
                formatted_text = f"[{lang}] {text}"
            else:
                formatted_text = text

            self.logger.debug(f"üé§ Synthesizing: {text[:50]}...")

            # –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ
            audio_array = self.generate_audio(
                text=formatted_text,
                history_prompt=voice,
                text_temp=temp,
                waveform_temp=0.7,
                use_small_model=small_model,
            )

            # Bark –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float32 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1.0, 1.0]
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ int16
            audio_int16 = self._float_to_int16(audio_array)

            self.logger.debug(f"‚úì Generated audio: {len(audio_int16)} samples")
            return audio_int16

        except Exception as e:
            self.logger.error(f"‚ùå Synthesis failed: {e}")
            raise RuntimeError(f"Bark synthesis error: {e}")

    def stream_synthesize(
        self,
        text: str,
        language: Optional[str] = None,
        voice_preset: Optional[str] = None,
        temperature: Optional[float] = None,
    ) -> Generator[Tuple[np.ndarray, str], None, None]:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –ø–æ—Ç–æ–∫–æ–º (sentence by sentence).
        
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ –æ—Ç–¥–µ–ª—å–Ω–æ.
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤.
        
        Args:
            text: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            language: –Ø–∑—ã–∫ —Å–∏–Ω—Ç–µ–∑–∞
            voice_preset: ID –≥–æ–ª–æ—Å–∞
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            
        Yields:
            Tuple[audio_array, label] –≥–¥–µ label="sentence_1", "sentence_2", etc.
            
        Raises:
            RuntimeError: –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.is_available():
            raise RuntimeError("Bark TTS is not available")

        try:
            # –†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            import re
            sentences = re.split(r'[.!?]+', text)
            sentences = [s.strip() for s in sentences if s.strip()]

            self.logger.info(f"üé§ Streaming synthesis of {len(sentences)} sentences...")

            for i, sentence in enumerate(sentences):
                if not sentence:
                    continue

                # –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                audio = self.synthesize(
                    sentence,
                    language=language,
                    voice_preset=voice_preset,
                    temperature=temperature,
                )

                label = f"sentence_{i+1}"
                self.logger.debug(f"‚úì Generated {label}: {sentence[:30]}...")
                yield (audio, label)

        except Exception as e:
            self.logger.error(f"‚ùå Stream synthesis failed: {e}")
            raise RuntimeError(f"Bark stream synthesis error: {e}")

    def adjust_speed(
        self,
        audio: np.ndarray,
        speed_factor: float = 1.0
    ) -> np.ndarray:
        """
        –†–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∞—É–¥–∏–æ (–Ω–µ –ø–æ —Å–º—ã—Å–ª—É, –∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏).
        
        –≠—Ç–æ –º–µ–Ω—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏—Ç—á–∞.
        
        Args:
            audio: –ê—É–¥–∏–æ –º–∞—Å—Å–∏–≤
            speed_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (0.5 = –º–µ–¥–ª–µ–Ω–Ω–µ–µ, 2.0 = –±—ã—Å—Ç—Ä–µ–µ)
            
        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤
        """
        if speed_factor == 1.0:
            return audio

        try:
            import librosa
            # –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏—Ç—á–∞
            adjusted = librosa.effects.time_stretch(audio.astype(float), rate=speed_factor)
            return self._float_to_int16(adjusted)
        except ImportError:
            self.logger.warning("librosa not installed, cannot adjust speed")
            return audio

    def get_available_voices(self, language: str = "ru") -> list[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞.
        
        Args:
            language: –ö–æ–¥ —è–∑—ã–∫–∞ ("ru", "en", etc.)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö voice presets
        """
        # Bark –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —è–∑—ã–∫–µ
        voices = []
        for i in range(10):  # –û–±—ã—á–Ω–æ 10 –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —è–∑—ã–∫
            voices.append(f"v2/{language}_speaker_{i}")
        return voices

    def shutdown(self) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É Bark TTS.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            # –û—á–∏—Å—Ç–∏—Ç—å GPU –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if self.use_gpu:
                try:
                    import torch
                    torch.cuda.empty_cache()
                    self.logger.info("‚úì GPU memory cleared")
                except:
                    pass

            self.bark_module = None
            self._initialized = False
            self._status.value = "unavailable"

            self.logger.info("‚úÖ Bark TTS shutdown complete")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Bark TTS shutdown failed: {e}")
            return False

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _float_to_int16(self, audio: np.ndarray) -> np.ndarray:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ float [-1, 1] –≤ int16 [-32768, 32767].
        
        Args:
            audio: Float –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤
            
        Returns:
            Int16 –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤
        """
        # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ float –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
        audio = np.clip(audio, -1.0, 1.0)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        audio_int16 = (audio * 32767).astype(np.int16)
        return audio_int16

    def _int16_to_float(self, audio: np.ndarray) -> np.ndarray:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ int16 –≤ float [-1, 1].
        
        Args:
            audio: Int16 –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤
            
        Returns:
            Float –∞—É–¥–∏–æ –º–∞—Å—Å–∏–≤
        """
        return audio.astype(np.float32) / 32767.0

    def get_model_info(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
        """
        return {
            "name": "Bark TTS",
            "provider": "Suno AI",
            "language": self.language,
            "quality": 5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            "speed": "slow" if not self.use_gpu else "medium",
            "use_gpu": self.use_gpu,
            "voice_preset": self.voice_preset,
            "sample_rate": self.sample_rate,
            "available": self.is_available(),
            "priority": self.get_priority(),
            "supports": [
                "100+ languages",
                "emotional intonation",
                "sound effects",
                "streaming synthesis"
            ],
        }
