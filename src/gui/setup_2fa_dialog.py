"""
Setup 2FA Dialog
–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import io
import logging

import pyotp
import qrcode
import requests
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (
    QDialog,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QVBoxLayout,
    QWidget,
)

from config.config import Config

logger = logging.getLogger(__name__)


class Setup2FADialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def __init__(self, user_id: str, parent=None):
        super().__init__(parent)
        self.user_id = user_id
        self.config = Config()
        self.secret = None
        self.qr_uri = None
        self.init_ui()
        self.load_2fa_setup()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA")
        self.setFixedSize(500, 600)
        self.setModal(True)

        # Frameless window
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)  # type: ignore[attr-defined]

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Title bar
        self.create_title_bar()
        main_layout.addWidget(self.title_bar)

        # Content
        content = QWidget()
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(15)

        # Info label
        info_label = QLabel("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
        info_label.setWordWrap(True)
        info_label.setStyleSheet("color: white; font-size: 12px;")
        content_layout.addWidget(info_label)

        # Step 1
        step1_label = QLabel("–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        step1_label.setStyleSheet("color: white; font-weight: bold; margin-top: 10px;")
        content_layout.addWidget(step1_label)

        apps_label = QLabel("‚Ä¢ Google Authenticator\n‚Ä¢ Microsoft Authenticator\n‚Ä¢ Authy\n‚Ä¢ –∏–ª–∏ –¥—Ä—É–≥–æ–µ TOTP-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        apps_label.setStyleSheet("color: #aaa; font-size: 11px;")
        content_layout.addWidget(apps_label)

        # Step 2
        step2_label = QLabel("–®–∞–≥ 2: –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥")
        step2_label.setStyleSheet("color: white; font-weight: bold; margin-top: 10px;")
        content_layout.addWidget(step2_label)

        # QR Code
        self.qr_label = QLabel()
        self.qr_label.setAlignment(Qt.AlignCenter)  # type: ignore[attr-defined]
        self.qr_label.setMinimumSize(250, 250)
        self.qr_label.setStyleSheet("background-color: white; border-radius: 10px; padding: 10px;")
        content_layout.addWidget(self.qr_label, alignment=Qt.AlignCenter)  # type: ignore[arg-type]

        # Secret key (manual entry)
        secret_layout = QHBoxLayout()
        secret_label = QLabel("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é:")
        secret_label.setStyleSheet("color: #aaa; font-size: 10px;")
        secret_layout.addWidget(secret_label)

        self.secret_edit = QLineEdit()
        self.secret_edit.setReadOnly(True)
        self.secret_edit.setStyleSheet(
            "background-color: rgb(50, 50, 50); color: white; font-family: monospace; padding: 5px;"
        )
        secret_layout.addWidget(self.secret_edit)

        copy_button = QPushButton("üìã")
        copy_button.setFixedWidth(40)
        copy_button.setToolTip("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á")
        copy_button.clicked.connect(self.copy_secret)
        secret_layout.addWidget(copy_button)

        content_layout.addLayout(secret_layout)

        # Step 3
        step3_label = QLabel("–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        step3_label.setStyleSheet("color: white; font-weight: bold; margin-top: 10px;")
        content_layout.addWidget(step3_label)

        verify_layout = QHBoxLayout()
        verify_label = QLabel("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        verify_label.setFixedWidth(140)
        verify_layout.addWidget(verify_label)

        self.code_edit = QLineEdit()
        self.code_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥")
        self.code_edit.setMaxLength(6)
        verify_layout.addWidget(self.code_edit)

        content_layout.addLayout(verify_layout)

        content_layout.addStretch()

        # Buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        self.verify_button = QPushButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å 2FA")
        self.verify_button.clicked.connect(self.verify_and_enable)
        buttons_layout.addWidget(self.verify_button)

        self.disable_button = QPushButton("–û—Ç–∫–ª—é—á–∏—Ç—å 2FA")
        self.disable_button.clicked.connect(self.disable_2fa)
        self.disable_button.setVisible(False)
        buttons_layout.addWidget(self.disable_button)

        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        buttons_layout.addWidget(self.cancel_button)

        content_layout.addLayout(buttons_layout)

        content.setLayout(content_layout)
        main_layout.addWidget(content)

        self.setLayout(main_layout)

        # Styling
        self.setStyleSheet(
            """
            QDialog {
                background-color: rgb(43, 43, 43);
                color: white;
            }
            QLabel {
                color: white;
            }
            QLineEdit {
                background-color: rgb(50, 50, 50);
                border: 1px solid rgb(70, 70, 70);
                border-radius: 5px;
                padding: 8px;
                color: white;
            }
            QLineEdit:focus {
                border: 1px solid rgb(0, 120, 215);
            }
            QPushButton {
                background-color: rgb(60, 60, 60);
                color: white;
                border: 1px solid rgb(80, 80, 80);
                border-radius: 5px;
                padding: 8px 16px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: rgb(70, 70, 70);
            }
            QPushButton:pressed {
                background-color: rgb(50, 50, 50);
            }
        """
        )

    def create_title_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        self.title_bar = QWidget()
        self.title_bar.setFixedHeight(30)
        self.title_bar.setStyleSheet(
            """
            QWidget {
                background-color: rgb(43, 43, 43);
                border-bottom: 1px solid rgb(60, 60, 60);
            }
        """
        )

        title_layout = QHBoxLayout()
        title_layout.setContentsMargins(10, 0, 0, 0)

        title_label = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA")
        title_label.setStyleSheet("color: white; font-weight: bold; font-size: 12px; border: none;")
        title_layout.addWidget(title_label)
        title_layout.addStretch()

        close_btn = QPushButton("√ó")
        close_btn.setStyleSheet(
            """
            QPushButton {
                background-color: rgb(43, 43, 43);
                color: rgb(80, 80, 80);
                border: none;
                font-size: 16px;
                font-weight: bold;
                width: 30px;
                height: 30px;
                min-width: 30px;
                padding: 0px;
            }
            QPushButton:hover {
                background-color: rgb(200, 50, 50);
                color: white;
            }
        """
        )
        close_btn.clicked.connect(self.reject)
        title_layout.addWidget(close_btn)

        self.title_bar.setLayout(title_layout)

        # Draggable
        self.title_bar.mousePressEvent = self.title_bar_mouse_press  # type: ignore[assignment]
        self.title_bar.mouseMoveEvent = self.title_bar_mouse_move  # type: ignore[assignment]

    def title_bar_mouse_press(self, event):
        if event.button() == Qt.LeftButton:  # type: ignore[attr-defined]
            self.drag_pos = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def title_bar_mouse_move(self, event):
        if event.buttons() == Qt.LeftButton and hasattr(self, "drag_pos"):  # type: ignore[attr-defined]
            self.move(event.globalPos() - self.drag_pos)
            event.accept()

    def load_2fa_setup(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ 2FA —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            auth_server = self.config.get("security.auth.server_url", "http://192.168.0.107:8000")
            url = f"{auth_server}/api/users/2fa/setup"

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            access_token = None
            if self.parent():
                access_token = getattr(self.parent(), "access_token", None)

            if not access_token:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                self.reject()
                return

            headers = {"Authorization": f"Bearer {access_token}"}

            response = requests.get(url, headers=headers, timeout=10)

            if response.status_code == 200:
                data = response.json()

                # –ï—Å–ª–∏ 2FA —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞
                if data.get("enabled", False):
                    self.show_2fa_enabled()
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ URI –¥–ª—è QR-–∫–æ–¥–∞
                self.secret = data.get("secret")
                self.qr_uri = data.get("qr_uri")

                if self.secret:
                    self.secret_edit.setText(self.secret)
                    self.generate_qr_code()

            else:
                error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA:\n{error_detail}")
                self.reject()

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 2FA: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
            self.reject()
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
            self.reject()

    def generate_qr_code(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
        try:
            if not self.qr_uri:
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            import qrcode.constants as qr_const
            
            qr = qrcode.QRCode(version=1, error_correction=qr_const.ERROR_CORRECT_L, box_size=10, border=4)
            qr.add_data(self.qr_uri)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QPixmap
            buffer = io.BytesIO()
            img.save(buffer, format="PNG")
            buffer.seek(0)

            pixmap = QPixmap()
            pixmap.loadFromData(buffer.read())

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            scaled_pixmap = pixmap.scaled(230, 230, Qt.KeepAspectRatio, Qt.SmoothTransformation)  # type: ignore[attr-defined]
            self.qr_label.setPixmap(scaled_pixmap)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")

    def copy_secret(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        from PyQt5.QtWidgets import QApplication

        if self.secret:
            clipboard = QApplication.clipboard()
            if clipboard:
                clipboard.setText(self.secret)
                QMessageBox.information(self, "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

    def verify_and_enable(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ 2FA"""
        code = self.code_edit.text().strip()

        if len(code) != 6:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥")
            return

        try:
            auth_server = self.config.get("security.auth.server_url", "http://192.168.0.107:8000")
            url = f"{auth_server}/api/users/2fa/enable"

            access_token = None
            if self.parent():
                access_token = getattr(self.parent(), "access_token", None)

            if not access_token:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return

            headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}

            payload = {"totp_code": code}

            response = requests.post(url, json=payload, headers=headers, timeout=10)

            if response.status_code == 200:
                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
                )
                self.accept()
            elif response.status_code == 400:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å 2FA:\n{error_detail}")

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")

    def disable_2fa(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é?\n\n–≠—Ç–æ —Å–Ω–∏–∑–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply != QMessageBox.Yes:
            return

        try:
            auth_server = self.config.get("security.auth.server_url", "http://192.168.0.107:8000")
            url = f"{auth_server}/api/users/2fa/disable"

            access_token = None
            if self.parent():
                access_token = getattr(self.parent(), "access_token", None)

            if not access_token:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return

            headers = {"Authorization": f"Bearer {access_token}"}

            response = requests.post(url, headers=headers, timeout=10)

            if response.status_code == 200:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                self.accept()
            else:
                error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å 2FA:\n{error_detail}")

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")

    def show_2fa_enabled(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ 2FA —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞"""
        self.qr_label.hide()
        self.secret_edit.hide()
        self.code_edit.hide()
        self.verify_button.hide()

        self.disable_button.setVisible(True)

        enabled_label = QLabel(
            "‚úì –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—ë, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É."
        )
        enabled_label.setStyleSheet("color: #00ff00; font-size: 14px; padding: 20px;")
        enabled_label.setAlignment(Qt.AlignCenter)  # type: ignore[attr-defined]
        enabled_label.setWordWrap(True)

        # –î–æ–±–∞–≤–ª—è–µ–º label –≤ layout
        content_layout = self.findChild(QWidget, "").layout()
        if content_layout:
            content_layout.insertWidget(2, enabled_label)
