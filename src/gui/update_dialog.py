"""
Update Dialog for Arvis
–î–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
from pathlib import Path

from PyQt5.QtCore import QThread, Qt, pyqtSignal
from PyQt5.QtWidgets import (
    QDialog,
    QHBoxLayout,
    QLabel,
    QMessageBox,
    QProgressBar,
    QPushButton,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from utils.update_checker import UpdateChecker

logger = logging.getLogger(__name__)


class UpdateCheckThread(QThread):
    """Thread –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ"""

    update_available = pyqtSignal(dict)
    check_completed = pyqtSignal(bool)

    def __init__(self, update_checker: UpdateChecker):
        super().__init__()
        self.update_checker = update_checker

    def run(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            release_info = self.update_checker.check_for_updates()
            if release_info:
                self.update_available.emit(release_info)
                self.check_completed.emit(True)
            else:
                self.check_completed.emit(False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            self.check_completed.emit(False)


class UpdateNotificationDialog(QDialog):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""

    def __init__(self, update_info: dict, update_checker: UpdateChecker, parent=None):
        super().__init__(parent)
        self.update_info = update_info
        self.update_checker = update_checker
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.setFixedSize(500, 400)
        self.setModal(True)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Title bar
        title_bar = self._create_title_bar()
        main_layout.addWidget(title_bar)

        # Content
        content = QWidget()
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(15)

        # Icon and title
        title_label = QLabel("üîî –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Arvis")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; color: white;")
        content_layout.addWidget(title_label)

        # Version info
        current_ver = self.update_checker.current_version
        new_ver = self.update_info.get("version", "Unknown")
        version_label = QLabel(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_ver}\n–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_ver}")
        version_label.setStyleSheet("color: #aaa; margin-bottom: 10px;")
        content_layout.addWidget(version_label)

        # Release notes
        notes_label = QLabel("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:")
        notes_label.setStyleSheet("font-weight: bold; color: white;")
        content_layout.addWidget(notes_label)

        notes_text = QTextEdit()
        notes_text.setReadOnly(True)
        notes_text.setMinimumHeight(150)
        body = self.update_info.get("body", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        # Limit length
        if len(body) > 500:
            body = body[:500] + "..."
        notes_text.setPlainText(body)
        content_layout.addWidget(notes_text)

        # Buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        later_button = QPushButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ")
        later_button.clicked.connect(self.reject)
        buttons_layout.addWidget(later_button)

        update_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å")
        update_button.clicked.connect(self.accept)
        buttons_layout.addWidget(update_button)

        content_layout.addLayout(buttons_layout)

        content.setLayout(content_layout)
        main_layout.addWidget(content)

        self.setLayout(main_layout)

        # Styling
        self.setStyleSheet(
            """
            QDialog {
                background-color: rgb(43, 43, 43);
                color: white;
            }
            QTextEdit {
                background-color: rgb(50, 50, 50);
                border: 1px solid rgb(70, 70, 70);
                border-radius: 5px;
                padding: 8px;
                color: white;
            }
            QPushButton {
                background-color: rgb(60, 60, 60);
                color: white;
                border: 1px solid rgb(80, 80, 80);
                border-radius: 5px;
                padding: 8px 16px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: rgb(70, 70, 70);
            }
            QPushButton:pressed {
                background-color: rgb(50, 50, 50);
            }
        """
        )

    def _create_title_bar(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title_bar = QWidget()
        title_bar.setFixedHeight(30)
        title_bar.setStyleSheet(
            """
            QWidget {
                background-color: rgb(43, 43, 43);
                border-bottom: 1px solid rgb(60, 60, 60);
            }
        """
        )

        layout = QHBoxLayout()
        layout.setContentsMargins(10, 0, 0, 0)

        title_label = QLabel("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        title_label.setStyleSheet("color: white; font-weight: bold; font-size: 12px; border: none;")
        layout.addWidget(title_label)
        layout.addStretch()

        close_btn = QPushButton("√ó")
        close_btn.setStyleSheet(
            """
            QPushButton {
                background-color: rgb(43, 43, 43);
                color: rgb(180, 180, 180);
                border: none;
                font-size: 20px;
                font-weight: bold;
                width: 30px;
                height: 30px;
                min-width: 30px;
                padding: 0px;
            }
            QPushButton:hover {
                background-color: rgb(232, 17, 35);
                color: white;
            }
        """
        )
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)

        title_bar.setLayout(layout)

        # Make draggable
        title_bar.mousePressEvent = self._title_bar_mouse_press
        title_bar.mouseMoveEvent = self._title_bar_mouse_move

        return title_bar

    def _title_bar_mouse_press(self, event):
        """Handle title bar mouse press"""
        if event.button() == Qt.LeftButton:
            self.drag_pos = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def _title_bar_mouse_move(self, event):
        """Handle title bar mouse move"""
        if event.buttons() == Qt.LeftButton and hasattr(self, "drag_pos"):
            self.move(event.globalPos() - self.drag_pos)
            event.accept()


class UpdateWorker(QThread):
    """Worker thread –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""

    progress_changed = pyqtSignal(int)
    status_changed = pyqtSignal(str)
    update_completed = pyqtSignal(bool, str)

    def __init__(self, update_checker: UpdateChecker, release_info: dict):
        super().__init__()
        self.update_checker = update_checker
        self.release_info = release_info
        self.update_archive = None

    def run(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            self.status_changed.emit("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            self.update_archive = self.update_checker.download_update(
                self.release_info, progress_callback=self.progress_changed.emit
            )

            if not self.update_archive:
                self.update_completed.emit(False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return

            self.progress_changed.emit(100)

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.status_changed.emit("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            success = self.update_checker.apply_update(self.update_archive)

            if success:
                self.update_completed.emit(True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                self.update_completed.emit(False, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ worker –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.update_completed.emit(False, str(e))


class UpdateDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""

    update_applied = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.update_checker = UpdateChecker()
        self.release_info = None
        self.worker = None
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Arvis")
        self.setFixedSize(600, 500)
        self.setModal(True)

        # –ë–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)  # type: ignore[attr-defined]

        # Main layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Custom title bar
        self.create_title_bar()
        main_layout.addWidget(self.title_bar)

        # Content
        content = QWidget()
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(15)

        # Status label
        self.status_label = QLabel("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        self.status_label.setStyleSheet("font-size: 14px; font-weight: bold; color: white;")
        content_layout.addWidget(self.status_label)

        # Version info
        self.version_label = QLabel()
        self.version_label.setStyleSheet("color: #aaa;")
        content_layout.addWidget(self.version_label)

        # Release notes
        notes_label = QLabel("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:")
        notes_label.setStyleSheet("font-weight: bold; color: white; margin-top: 10px;")
        content_layout.addWidget(notes_label)

        self.notes_text = QTextEdit()
        self.notes_text.setReadOnly(True)
        self.notes_text.setMinimumHeight(200)
        content_layout.addWidget(self.notes_text)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        content_layout.addWidget(self.progress_bar)

        # Buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        self.check_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        self.check_button.clicked.connect(self.check_updates)
        buttons_layout.addWidget(self.check_button)

        self.install_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.install_button.clicked.connect(self.install_update)
        self.install_button.setEnabled(False)
        buttons_layout.addWidget(self.install_button)

        self.close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        self.close_button.clicked.connect(self.reject)
        buttons_layout.addWidget(self.close_button)

        content_layout.addLayout(buttons_layout)

        content.setLayout(content_layout)
        main_layout.addWidget(content)

        self.setLayout(main_layout)

        # Styling
        self.setStyleSheet(
            """
            QDialog {
                background-color: rgb(43, 43, 43);
                color: white;
            }
            QTextEdit {
                background-color: rgb(50, 50, 50);
                border: 1px solid rgb(70, 70, 70);
                border-radius: 5px;
                padding: 8px;
                color: white;
            }
            QProgressBar {
                border: 1px solid rgb(70, 70, 70);
                border-radius: 5px;
                text-align: center;
                background-color: rgb(50, 50, 50);
                color: white;
            }
            QProgressBar::chunk {
                background-color: rgb(0, 120, 215);
                border-radius: 4px;
            }
            QPushButton {
                background-color: rgb(60, 60, 60);
                color: white;
                border: 1px solid rgb(80, 80, 80);
                border-radius: 5px;
                padding: 8px 16px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: rgb(70, 70, 70);
            }
            QPushButton:pressed {
                background-color: rgb(50, 50, 50);
            }
            QPushButton:disabled {
                background-color: rgb(40, 40, 40);
                color: rgb(100, 100, 100);
            }
        """
        )

    def create_title_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        self.title_bar = QWidget()
        self.title_bar.setFixedHeight(30)
        self.title_bar.setStyleSheet(
            """
            QWidget {
                background-color: rgb(43, 43, 43);
                border-bottom: 1px solid rgb(60, 60, 60);
            }
        """
        )

        title_layout = QHBoxLayout()
        title_layout.setContentsMargins(10, 0, 0, 0)

        title_label = QLabel("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Arvis")
        title_label.setStyleSheet("color: white; font-weight: bold; font-size: 12px; border: none;")
        title_layout.addWidget(title_label)
        title_layout.addStretch()

        close_btn = QPushButton("√ó")
        close_btn.setStyleSheet(
            """
            QPushButton {
                background-color: rgb(43, 43, 43);
                color: rgb(80, 80, 80);
                border: none;
                font-size: 16px;
                font-weight: bold;
                width: 30px;
                height: 30px;
                min-width: 30px;
                padding: 0px;
            }
            QPushButton:hover {
                background-color: rgb(200, 50, 50);
                color: white;
            }
        """
        )
        close_btn.clicked.connect(self.reject)
        title_layout.addWidget(close_btn)

        self.title_bar.setLayout(title_layout)

        # Draggable title bar
        self.title_bar.mousePressEvent = self.title_bar_mouse_press  # type: ignore[assignment]
        self.title_bar.mouseMoveEvent = self.title_bar_mouse_move  # type: ignore[assignment]

    def title_bar_mouse_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–µ"""
        if event.button() == Qt.LeftButton:  # type: ignore[attr-defined]
            self.drag_pos = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def title_bar_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–µ"""
        if event.buttons() == Qt.LeftButton and hasattr(self, "drag_pos"):  # type: ignore[attr-defined]
            self.move(event.globalPos() - self.drag_pos)
            event.accept()

    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.status_label.setText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        self.check_button.setEnabled(False)
        self.notes_text.clear()

        try:
            self.release_info = self.update_checker.check_for_updates()

            if self.release_info:
                version = self.release_info.get("version", "Unknown")
                self.status_label.setText(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
                self.version_label.setText(
                    f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.update_checker.current_version} ‚Üí –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {version}"
                )

                # Release notes
                body = self.release_info.get("body", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                self.notes_text.setMarkdown(body)

                self.install_button.setEnabled(True)
            else:
                self.status_label.setText("–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é")
                self.version_label.setText(f"–í–µ—Ä—Å–∏—è: {self.update_checker.current_version}")
                self.notes_text.setPlainText("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.install_button.setEnabled(False)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            self.status_label.setText("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            self.notes_text.setPlainText(f"–û—à–∏–±–∫–∞: {str(e)}")

        finally:
            self.check_button.setEnabled(True)

    def install_update(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not self.release_info:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?\n\n"
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n"
            "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply != QMessageBox.Yes:
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.check_button.setEnabled(False)
        self.install_button.setEnabled(False)
        self.close_button.setEnabled(False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)

        # –ó–∞–ø—É—Å–∫–∞–µ–º worker
        self.worker = UpdateWorker(self.update_checker, self.release_info)
        self.worker.progress_changed.connect(self.on_progress_changed)
        self.worker.status_changed.connect(self.on_status_changed)
        self.worker.update_completed.connect(self.on_update_completed)
        self.worker.start()

    def on_progress_changed(self, value: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞"""
        self.progress_bar.setValue(value)

    def on_status_changed(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.setText(status)

    def on_update_completed(self, success: bool, message: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.progress_bar.setVisible(False)
        self.close_button.setEnabled(True)

        if success:
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"{message}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.",
            )
            self.update_applied.emit()
            self.accept()
        else:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n{message}",
            )
            self.check_button.setEnabled(True)
            self.install_button.setEnabled(True)

    def showEvent(self, event):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏"""
        super().showEvent(event)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
        if not self.release_info:
            self.check_updates()
